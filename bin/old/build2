assert(_CC_VERSION or _HOST, "CC 1.74+ required!")
local apis = {}
local loaded = {}
apis["apis/logging.lua"] = "levels = {}\
levels.fine = -1\
levels[-1] = \"FINE\"\
levels.info = 0\
levels[0] = \"INFO\"\
levels.warning = 1\
levels[1] = \"WARNING\"\
levels.error = 2\
levels[2] = \"ERROR\"\
levels.success = 3\
levels[3] = \"SUCCESS\"\
\
local start = os.clock()\
local fileout\
local termout = true\
local colored = true\
\
-- symbols\
-- {{msg}} message\
-- {{time}} os.clock value\
-- {{running}} time since program started\
-- {{level}} logging level\
local termformat = \"{{msg}}\"\
local fileformat = \"[{{level}}] {{running}}: {{msg}}\"\
\
function setTermOutput(bool)\
	termout = bool\
end\
\
function setFileOut(file)\
	fileout = file\
end\
\
function setTermFormat(str)\
	termformat = str\
end\
\
function setFileFormat(str)\
	fileformat = str\
end\
\
function setColored(bool)\
	colored = bool\
end\
\
\
local function format(str, msg, lvl)\
	str = str:gsub(\"{{msg}}\",msg):gsub(\"{{time}}\",os.clock()):gsub(\"{{running}}\",os.clock() - start):gsub(\"{{level}}\",levels[lvl])\
	return str\
end\
\
function log(msg, level)\
	level = level or levels.info\
	if termout then\
		local old = term.getTextColor()\
		if colored then\
			if level == levels.fine then\
				term.setTextColor(colors.lightGray)\
			elseif level == levels.warning and term.isColor() then\
				term.setTextColor(colors.yellow)\
			elseif level == levels.error and term.isColor() then\
				term.setTextColor(colors.red)\
			elseif level == levels.success and term.isColor() then\
				term.setTextColor(colors.green)\
			else\
				term.setTextColor(colors.white)\
			end\
		end\
		print(format(termformat,msg,level))\
		term.setTextColor(old)\
	end\
	if fileout then\
		local f = fs.open(fileout,\"a\")\
		f.write(format(fileformat,msg,level)..\"\\n\")\
		f.close()\
	end\
end"
apis["apis/codeutils.lua"] = "function escape(str, readable)\
	str = str:gsub(\"\\\\\",\"\\\\\\\\\")\
	str = str:gsub(\"\\\"\",\"\\\\\\\"\")\
	if readable then\
		str = str:gsub(\"\\n\",\"\\\\\\n\")\
	else\
		str = str:gsub(\"\\n\",\"\\\\n\")\
		str = str:gsub(\"\\t\",\"\\\\t\")\
	end\
	return str\
end\
\
-- todo\
function minify(str)\
	return str\
end"
apis["apis/tblutils.lua"] = "function contains(table, value)\
	for k,v in pairs(table) do\
		if v == value then return true end\
	end\
	return false\
end\
\
function count(table)\
	local i = 0\
	for _,_ in pairs(table) do\
		i = i + 1\
	end\
	return i\
end"
apis["apis/fsutils.lua"] = "function resolve(path, base)\
	local s = string.sub( path, 1, 1 )\
	if s == \"/\" or s == \"\\\\\" then\
		return fs.combine( \"\", path )\
	else\
		return fs.combine( base, path )\
	end\
end"
apis["source/b2/resources.lua"] = "-- strings\
usage = [[usage: build <input> [output] [options]\
OPTIONS\
  -i, -input <path>: alternate way of specifying input file\
  -o, -output <path>: alternate way of specifying output file\
  -r, -run: run the output after building\
  -I, -ignoreMissing: continue build even if some apis are not found\
  -O, -overwrite: if output file exists, overwrite it\
  -?, -help: show this information]]\
apipath = [[.:apis:lib:/apis:/lib:/rom/apis]]\
apiext = [[.lua]]\
no_input = [[no input specified]]\
missing_input = [[input file non-existant]]\
input_dir_no_main = [[cannot find main.lua in directory]]\
usage_tip = [[use -help to show usage]]\
building = [[building '%s']]\
req_string = [[local %s = require(\"%s\")]]\
no_action = [[no action specified]]\
missing_api = [[failed to find '%s' as requested by '%s']]\
parsed = [[recursively found %i inclusion]]\
assembling = [[assembling output...]]\
syntax_err = [[syntax error in '%s']]\
build_success = [[build successful]]\
writing = [[saving output as file]]\
overwrite_err = [[output file '%s' already exists]]\
overwriting = [[output file '%s' already exists, overwriting]]\
written = [[output written successfully]]\
\
-- code\
pre_load = [[assert(_CC_VERSION or _HOST, \"CC 1.74+ required!\")\
local apis = {}\
local loaded = {}\
]]\
load = [[apis[\"%s\"] = \"%s\"\
]]\
loadf = [[local main = \"%s\"\
local name = \"%s\"\
]]\
post_load = [[local function require(path)\
	if loaded[path] then return loaded[path] end\
	if not apis[path] then return {} end\
	local e = {}\
	e.require = require\
	setmetatable(e,{__index = _ENV})\
	load(apis[path],fs.getName(path),nil,e)()\
	local out = {}\
	for k,v in pairs(e) do\
		out[k] = v\
	end\
	return out\
end\
local e = {}\
setmetatable(e,{__index=_ENV})\
e.require = require\
return load(main, name, nil, e)(...)]]"
apis["apis/args.lua"] = "function parse(args)\
	local out = {}\
	out.paths = {}\
	for n,arg in ipairs(args) do\
		if arg:sub(1,1) == '-' then\
			local name, value = arg:match(\"%-([^:]+):([^:]+)\")\
			if name and value then\
				out[name] = value\
			else\
				local name = arg:match(\"%-([^:]+)\")\
				if args[n+1] then\
					local value = args[n+1]\
					if not (value:sub(1,1) == \"-\") then\
						out[name] = value\
					else\
						out[name] = true\
					end\
				else\
					out[name] = true\
				end\
			end\
		else\
			if n == 1 then\
				out.input = arg\
			else\
				table.insert(out.paths, arg)\
			end\
		end\
	end\
	return out\
end"
local main = "local resources = require(\"source/b2/resources.lua\")\
local args = require(\"apis/args.lua\")\
local fsutils = require(\"apis/fsutils.lua\")\
local codeutils = require(\"apis/codeutils.lua\")\
local tblutils = require(\"apis/tblutils.lua\")\
local logging = require(\"apis/logging.lua\")\
\
local args = args.parse({...})\
\
if args.help or args[\"?\"] then\
	term.setTextColor(colors.white)\
	print(resources.usage)\
	return\
end\
\
if args.i then args.input = args.i end\
if args.o then args.output = args.o end\
if args.paths[1] and not args.output then args.output = args.paths[1] end\
if args.r then args.run = args.r end\
if args.I then args.ignoreMissing = args.I end\
if args.O then args.overwrite = args.O end\
\
if args.input then\
	args.input = fsutils.resolve(args.input, shell.dir())\
end\
\
if args.output then\
	args.output = fsutils.resolve(args.output, shell.dir())\
end\
\
local apipath = _G.APIPATH or resources.apipath\
local apiext = _G.APIEXT or resources.apiext\
\
if not args.input then\
	logging.log(resources.no_input, logging.levels.error)\
	logging.log(resources.usage_tip, logging.levels.error)\
	return\
end\
\
if not fs.exists(args.input) then\
	logging.log(resources.missing_input, logging.levels.error)\
	return\
end\
\
local function locate(api, base)\
	-- where base is the folder containing the requesting file\
	local out\
	for spath in apipath:gmatch(\"([^:]+)\") do\
		spath = fsutils.resolve(spath,base)\
		for ext in apiext:gmatch(\"([^:]+)\") do\
			if fs.exists(fsutils.resolve(api..ext,spath)) then\
				out = fsutils.resolve(api..ext,spath)\
				break\
			end\
		end\
		if not out then\
			if fs.exists(fsutils.resolve(api,spath)) then\
				out = fsutils.resolve(api,spath)\
			end\
		end\
		if out then break end\
	end\
	return out\
end\
\
local file\
\
if fs.isDir(args.input) then\
	local main\
	for ext in apiext:gmatch(\"([^:]+)\") do\
		if fs.exists(fsutils.resolve(\"main\"..ext, args.input)) then\
			main = fsutils.resolve(\"main\"..ext, args.input)\
			break\
		end\
	end\
	if not main then\
		if fs.exists(fsutils.resolve(\"main\", args.input)) then\
			main = fsutils.resolve(\"main\", args.input)\
		end\
	end\
	if main then\
		file = main\
	end\
else\
	file = args.input\
end\
\
if not file then\
	logging.log(resources.missing_input, logging.levels.error)\
	return\
end\
\
logging.log(string.format(resources.building,file),logging.levels.info)\
\
if not (args.output or args.run) then\
	logging.log(resources.no_action, logging.levels.warning)\
end\
\
local function parseRecurse(file)\
	local paths = {}\
	local f = fs.open(file,\"r\")\
	local fdata = f.readAll()\
	if not fdata:sub(#fdata) == \"\\n\" then fdata = fdata..\"\\n\" end\
	f.close()\
	for inclusion in fdata:gmatch(\"@include (%w+)\\n\") do\
		local p = locate(inclusion, fs.getDir(file))\
		if p then\
			fdata = fdata:gsub(\"@include \"..inclusion..\"\\n\",string.format(resources.req_string,inclusion,p)..\"\\n\")\
			local fd, incpaths = parseRecurse(p)\
			paths[p] = fd\
			for k,v in pairs(incpaths) do\
				if not paths[k] then paths[k] = v end\
			end\
		else\
			if args.ignoreMissing then\
				logging.log(string.format(resources.missing_api,inclusion,file),logging.levels.warning)\
				fdata = fdata:gsub(\"@include (%w+)\\n\",\"\\n\")\
			else\
				logging.log(string.format(resources.missing_api,inclusion,file),logging.levels.error)\
				error(\"\",0)\
			end\
		end\
	end\
	return fdata, paths\
end\
\
local fdata, paths = parseRecurse(file)\
logging.log(string.format(resources.parsed,tblutils.count(paths))..((tblutils.count(paths) ~= 1 and \"s\") or \"\"), logging.levels.fine)\
logging.log(resources.assembling,logging.levels.fine)\
\
local output = \"\"\
\
output = output .. resources.pre_load\
for k,v in pairs(paths) do\
	local _, e = load(v)\
	if e then\
		logging.log(string.format(resources.syntax_err,k),logging.levels.error)\
		logging.log(e,logging.levels.error)\
		return\
	end\
	output = output .. string.format(resources.load, k, codeutils.escape(v,true))\
end\
local _, e  = load(fdata)\
if e then\
	logging.log(string.format(resources.syntax_err,file),logging.levels.error)\
	logging.log(e,logging.levels.error)\
	return\
end\
output = output .. string.format(resources.loadf, codeutils.escape(fdata, true), fs.getName(file))\
output = output .. resources.post_load\
\
logging.log(resources.build_success,logging.levels.success)\
\
if args.output then\
	logging.log(resources.writing, logging.levels.info)\
	if fs.exists(args.output) then\
		if not args.overwrite then\
			logging.log(string.format(resources.overwrite_err, args.output), logging.levels.error)\
			return\
		else\
			logging.log(string.format(resources.overwriting, args.output), logging.levels.warning)\
		end\
	end\
	local f = fs.open(args.output,\"w\")\
	f.write(output)\
	f.close()\
	logging.log(resources.written,logging.levels.success)\
end\
\
if args.run then\
	logging.log(\"running output\",logging.levels.info)\
	local e = {}\
	setmetatable(e, {__index = _G})\
	local func = load(output, \"build output\", nil, e)\
	local ok, err = pcall(func)\
	if ok then\
		logging.log(\"output ran successfully\", logging.levels.success)\
	else\
		logging.log(\"output errored\", logging.levels.error)\
		logging.log(err, logging.levels.error)\
	end\
end"
local name = "main.lua"
local function require(path)
	if loaded[path] then return loaded[path] end
	if not apis[path] then return {} end
	local e = {}
	e.require = require
	setmetatable(e,{__index = _ENV})
	load(apis[path],fs.getName(path),nil,e)()
	local out = {}
	for k,v in pairs(e) do
		out[k] = v
	end
	return out
end
local e = {}
setmetatable(e,{__index=_ENV})
e.require = require
return load(main, name, nil, e)(...)